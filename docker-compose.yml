services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: agro_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agro_db
      - POSTGRES_USER=agro_user
      - POSTGRES_PASSWORD=agro_password_secure_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - agro_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agro_user -d agro_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agro_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      # Persistir archivos media
      - ./backend/media:/app/media:rw
      # Montar staticfiles como volumen nombrado para evitar problemas de permisos
      - staticfiles_data:/app/staticfiles
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=agro_backend.settings_production
      - ALLOWED_HOSTS=34.136.15.241,localhost,127.0.0.1,0.0.0.0
      - CORS_ALLOWED_ORIGINS=http://34.136.15.241:3000,http://localhost:3000
      - POSTGRES_DB=agro_db
      - POSTGRES_USER=agro_user
      - POSTGRES_PASSWORD=agro_password_secure_2024
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    networks:
      - agro_network
    depends_on:
      db:
        condition: service_healthy

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: agro_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://34.136.15.241:8000/api
      - NODE_ENV=production
    networks:
      - agro_network

  # Nginx Reverse Proxy (Opcional - para producci√≥n)
  nginx:
    image: nginx:alpine
    container_name: agro_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - agro_network
    depends_on:
      - backend
      - frontend
    profiles:
      - production

networks:
  agro_network:
    driver: bridge

volumes:
  postgres_data:
  media_data:
  staticfiles_data:
  static_data:
